# per section 7 in the paper, start with horizontal layout, recursively
function initial-layout chips, n = 0
  node: \H
  id: "operator#n"
  operand: false
  operator: true
  children:
    * if chips.length is 2
        node:   n + 1
        id: n + 1
        operand: true
        operator: false
        chip: chips.1
      else
        initial-layout chips.slice(1), n + 1
    * node: n
      id: n
      operand: true
      operator: false
      chip: chips.0

complement = H: \V V: \H
slice-direction = H: \width, V: \height
opposite = width: \height height: \width
line-dimension = width: \x height: \y
opp-dimension = x: \y y: \x

# expand leaves to rectangles, and decorate branch nodes with size fitted to
# their children
function calculate-size layout
  if layout.children?
    left  = calculate-size layout.children.0
    right = calculate-size layout.children.1

    dir = slice-direction[layout.node]
    opp = opposite[dir]

    fitted = Math.max left[dir], right[dir]

    # expand both children
    set-size left,  dir, fitted
    set-size right, dir, fitted

    # fitted along slice direction, summed in other
    layout <<<
      (dir): fitted
      (opp): left[opp] + right[opp]
  else
    layout <<< layout.chip{width, height}

function set-size layout, dir, value
  layout[dir] = value
  if slice-direction[layout.node] is dir and layout.children
    set-size that.0, dir, value
    set-size that.1, dir, value
function flat-svg-layout layout, pos ? x: 0 y: 0
  rectangles = []
  slice-lines = []
  if layout.children
    [left, right] = layout.children

    dir = slice-direction[layout.node]
    opp = opposite[dir]

    line-dim = line-dimension[dir]
    line-opp = opp-dimension[line-dim]

    slice-lines.push layout <<<
      # stretches across group
      (line-dim + \1): pos[line-dim]
      (line-dim + \2): pos[line-dim] + layout[dir]

      # starting after left node
      (line-opp + \1): pos[line-opp] + left[opp]
      (line-opp + \2): pos[line-opp] + left[opp]

    left-layout = flat-svg-layout left, pos
    right-layout = flat-svg-layout right,
      (line-dim): pos[line-dim]
      (line-opp): pos[line-opp] + left[opp]

    rectangles.push ...left-layout.rectangles, ...right-layout.rectangles
    slice-lines.push ...left-layout.slice-lines, ...right-layout.slice-lines
  else
    rectangles.push layout <<<
      rect-x: pos.x
      rect-y: pos.y

  return {rectangles, slice-lines}

function preorder
  order = []
  visit = ->
    order.push it
    if it.children then for that => visit &
  visit it
  return order

function postorder
  order = []
  visit = ->
    if it.children then for that => visit &
    order.push it
  visit it
  return order

# decorate postordered expr with d-numbers defined by
# section 4, last paragraph of the paper, for easy validity
# checking for move3
function d-number expr
  zeros = 0
  for expr
    zeros++ if &operator
    &d = zeros
