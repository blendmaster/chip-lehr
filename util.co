$ = -> document.get-element-by-id it
$$ = -> [].slice.call document.query-selector-all it

function initial-expr chips
  expr = [{node: 0 id: 0, +operand, -operator, chip: chips.0, idx: 0}]
  n = 1
  for chip, i of chips.slice 1
    expr.push do
      {node: "#{i + 1}" , id: i + 1 , +operand, -operator, chip, idx: n++}
      {node: \H       , id: "op#i", -operand, +operator,       idx: n++}
  expr

function unpack-expr expr-string, chips
  ops = 0
  for s, i of expr-string
    operator = s is \H or s is \V
    operand = !operator
    id = if operand then s else "op#{ops++}"
    chip = if operand then chips[s]
    {node: s, id, operand, operator, chip, idx: i}

function pack-expr
  it.map(-> it.node)join ''

function pack-chips
  it.map(-> "#{it.width}x#{it.height}")join ' '

function unpack-chips
  it.split /\s+/ .map ->
    [_, width, height] = /(\d+)x(\d+)/.exec it
    width: parseInt width, 10
    height: parseInt height, 10

function pack-hash expr, chips
  store-hash do
    chips: pack-chips chips
    expr: pack-expr expr

function unpack-hash
  data = hash-data!

  if data?chips
    chips = unpack-chips that
  else
    chips =
      * width: 10 height: 10
      * width:  6 height: 12
      * width:  3 height:  2
      * width:  5 height:  3
      * width:  5 height:  3
      * width:  5 height:  3

  expr =
    if data?expr
      unpack-expr that, chips
    else
      initial-expr chips

  return {chips, expr}

# from postorder expr nodes to new tree
function tree-from expr
  nodes = expr.map -> {...it}
  stack = [nodes.shift!, nodes.shift!]
  while next = nodes.shift!
    if next.operator
      right = stack.pop!
      left  = stack.pop!
      next.children = [left, right]
    stack.push next

  return stack.0

function preorder
  order = []
  visit = ->
    order.push it
    if it.children then for that => visit &
  visit it
  return order

function postorder
  order = []
  visit = ->
    if it.children then for that => visit &
    order.push it
  visit it
  return order

# decorate postordered expr with d-numbers defined by
# section 4, last paragraph of the paper, for easy validity
# checking for move3
function d-number expr
  zeros = 0
  for expr
    zeros++ if &operator
    &d = zeros

complement      = H: \V V: \H
slice-direction = H: \width, V: \height
opposite        = width: \height height: \width
line-dimension  = width: \x height: \y
opp-dimension   = x: \y y: \x

# expand leaves to rectangles, and decorate nodes with size fitted to
# their children
# not efficient, but it'll do
function calculate-size root
  if root.children?
    left  = calculate-size root.children.0
    right = calculate-size root.children.1

    dir = slice-direction[root.node]
    opp = opposite[dir]

    fitted = Math.max left[dir], right[dir]

    # fitted along slice direction, summed in other
    root <<<
      (dir): fitted
      (opp): left[opp] + right[opp]
  else
    root <<< root.chip{width, height}

# after calculate-size runs, lines are spanned, but rectangles are in the top
# left corners
# so expand them to the full size
function expand-rects root, size ? root{width, height}
  root.width = size.width if root.width < size.width
  root.height = size.height if root.height < size.height
  if root.children?
    [left, right] = root.children
    switch root.node
    case \H
      half = root.height / 2
      stretch = 0
      stretch = half if left.height < half and right.height < half

      expand-rects left, {root.width, height: Math.max stretch, left.height}
      expand-rects right, {root.width, height: Math.max stretch, right.height}
    case \V
      half = root.width / 2
      stretch = 0
      stretch = half if left.width < half and right.width < half
      expand-rects left, {root.height, width: Math.max stretch, left.width}
      expand-rects right, {root.height, width: Math.max stretch, right.width}

function flat-svg-layout layout, pos ? x: 0 y: 0
  rectangles = []
  slice-lines = []
  if layout.children
    [left, right] = layout.children

    dir = slice-direction[layout.node]
    opp = opposite[dir]

    line-dim = line-dimension[dir]
    line-opp = opp-dimension[line-dim]

    slice-lines.push layout <<<
      # stretches across group
      (line-dim + \1): pos[line-dim]
      (line-dim + \2): pos[line-dim] + layout[dir]

      # starting after left node
      (line-opp + \1): pos[line-opp] + left[opp]
      (line-opp + \2): pos[line-opp] + left[opp]

    left-layout = flat-svg-layout left, pos
    right-layout = flat-svg-layout right,
      (line-dim): pos[line-dim]
      (line-opp): pos[line-opp] + left[opp]

    rectangles.push ...left-layout.rectangles, ...right-layout.rectangles
    slice-lines.push ...left-layout.slice-lines, ...right-layout.slice-lines
  else
    rectangles.push layout <<<
      rect-x: pos.x
      rect-y: pos.y

  return {rectangles, slice-lines}

function store-hash data
  location.hash = window.encodeURIComponent JSON.stringify data

function hash-data
  try
    JSON.parse window.decodeURIComponent location.hash.substring 1

