var chips
var layout-root, rect-root, line-root, tree-root, link-root, node-root, expr-root
var layout-border

# enter in all the d3 nodes, and transition to new state
!function display-layout expr
  # calculate d-numbers
  d-number expr
  # calculate and decorate layout tree
  layout = tree-from expr
  preordered  = preorder  layout
  postordered = postorder layout

  # decorate indices
  for n, i of postordered
    n.postorder = i
  for n, i of preordered
    n.preorder = i

  # slicing layout
  calculate-size layout
  expand-rects layout
  slicing-svg-layout = flat-svg-layout layout

  $ \area .value = layout.width * layout.height

  # fit layout to 300, 300
  max-dim = 10 * Math.max layout.width, layout.height
  scale = 300 / max-dim

  layout-root .transition!duration 750
    .attr \transform "scale(#scale)"

  layout-border .transition!duration 750 .attr do
    width: layout.width * 10
    height: layout.height * 10

  rectangles = rect-root.select-all \g.layout-area
    .data slicing-svg-layout.rectangles, -> it.id

  rectangles
    &exit!remove!
    &enter!
      group = &append \svg:g .attr \class \layout-area
        .attr transform: ({rect-x, rect-y}) ->
          "translate(#{10 * rect-x}, #{10 * rect-y})"
      group
        &append \svg:rect .attr \class \layout-rect
          .attr do
            width: -> it.width * 10
            height: -> it.height * 10
        &append \svg:rect .attr \class \layout-chip
        &append \svg:text .attr \class \layout-text

    &transition!duration 750 .attr do
      transform: ({rect-x, rect-y}) ->
        "translate(#{10 * rect-x}, #{10 * rect-y})"

    &select \.layout-rect
      .attr \id -> "l#{it.preorder}"
      .transition!duration 750 .attr do
        width: -> it.width * 10
        height: -> it.height * 10

    &select \.layout-chip .transition!duration 750 .attr do
      width: -> it.chip.width * 10
      height: -> it.chip.height * 10
      x: -> (it.width * 10 - it.chip.width * 10) / 2
      y: -> (it.height * 10 - it.chip.height * 10) / 2

    &select \.layout-text
      .text -> it.node
      .transition!duration 750
      .style \font-size ->
        "#{Math.max 8, (Math.min 36, it.height * 10, it.width * 10)}px"
      .attr do
        x: -> it.width * 10 / 2
        y: -> it.height * 10 / 2

  lines = line-root.select-all \line.layout-line
    .data slicing-svg-layout.slice-lines, -> it.id
  lines
    &exit!remove!
    &enter!append \svg:line
      .attr \class \layout-line
    &attr do
      id: -> "l#{it.preorder}"
    &transition!duration 750
      .attr do
        x1: -> it.x1 * 10
        x2: -> it.x2 * 10
        y1: -> it.y1 * 10
        y2: -> it.y2 * 10

  # slicing tree
  tree = d3.layout.tree!size [400 400]
  nodes = tree.nodes layout
  links = tree.links nodes

  link = d3.svg.diagonal!

  link-nodes = link-root.select-all \path.link
    .data links, ->
      s = it.source.id
      t = it.target.id
      # keep ordering the same after transitions
      if s > t
        "#s#t"
      else
        "#t#s"
  link-nodes
    &exit!transition!duration 750
      .style \stroke-opacity 0
      .remove!
    &enter!append \svg:path .attr \class \link
      .style \stroke-opacity 0
    &transition!duration 750
      .attr \d link
      .style \stroke-opacity 1

  node-group = node-root.select-all \g.node
    .data nodes, -> it.id

  node-group.exit!remove!
  node-group.enter!
    g = &append \svg:g .attr do
      class: \node
      transform: 'translate(0,0)'
    g
      &append \svg:circle .attr do
        class : \node-dot
        r     : 10
      &append \svg:text
        .attr class: \node-text

  texts = node-group.select \.node-text

  # highlight changed nodes
  node-group.filter ->
    t = this.query-selector \.node-text
    it.node != t.textContent
  .insert \svg:circle \:first-child
  .attr do
    class : \highlight-dot
    r: 10
  .style fill: \#000
  .transition!duration 750
    .attr \r 30
    .style \opacity 0
    .remove!

  texts.text -> it.node

  node-group.transition!duration 750
    .attr \transform ({x, y}) -> "translate(#x, #y)"

  circles = node-group.select \.node-dot

  # draw polish expr

  max-width = document.documentElement.clientWidth - 100
  expr-width = Math.min max-width, expr.length * 50

  char-width = expr-width / expr.length

  expr-root.attr do
    width: expr-width
    height: 100
  tokens = expr-root.select-all \.token .data postordered, -> it.id
  tokens
    &exit!remove!

    &filter ->
      t = this.query-selector \.token-text
      it.node != t.textContent
    .insert \svg:circle \:first-child
    .attr do
      class : \highlight-dot
      r: 10
    .style fill: \#000
    .transition!duration 750
      .attr \r 50
      .style \opacity 0
      .remove!

    &enter!
      g = &append \svg:g .attr \class \token
        .attr \transform 'translate(0,0)'
      g
        &append \svg:rect
          .attr do
            class: \token-rect
            height: 50
            x: -(char-width / 2)
            y: -25
        &append \text
          .attr class: \token-text
    &select \.token-text
      .text -> it.node
      .transition!duration 750
      .style \font-size -> "#{Math.max 8, (Math.min 36, char-width / 2)}px"
    &select \.token-rect
      .transition!duration 750 .attr do
        width: char-width
    &transition!duration 750
      .attr do
        transform: (_, i) -> "translate(#{i * char-width + char-width / 2}, 50)"
      .each \end ->
        # highlight from expr, and clear existing highlight
        d3.select this
          .on \mouseover mouseover
          .on \mouseout  mouseout

  # setup synchronized highlighting

  highlight = (it, className, state)->
    d3.select tokens.0[it.idx] .classed className, state
    d3.select circles.0[it.preorder] .classed className, state
    d3.select "\#l#{it.preorder}"    .classed className, state

  # highlight node and its left and right subtree in both the tree and expression
  set-class = (state) -> ->
    highlight it, \hovered state
    if it.children
      highlight-tree that.0, \left-hovered state
      highlight-tree that.1, \right-hovered state

  highlight-tree = (root, className, state) ->
    highlight root, className, state
    if root.children
      highlight-tree that.0, className, state
      highlight-tree that.1, className, state

  mouseover = set-class true
  mouseout = !->
    d3.select-all \.hovered .classed \hovered false
    d3.select-all \.left-hovered .classed \left-hovered false
    d3.select-all \.right-hovered .classed \right-hovered false

  # highlight from graph
  node-group
    .on \mouseover mouseover
    .on \mouseout  mouseout

  # highlight from layout
  rectangles
    .on \mouseover mouseover
    .on \mouseout  mouseout
  lines
    .on \mouseover mouseover
    .on \mouseout  mouseout

  # Testing: make move1 on expr
  tokens.on \click !(node) ->
    it = expr[node.idx]
    next = expr[it.idx + 1]

    move-no = $$ 'input[type=radio]' .filter(-> it.checked)0.value

    switch move-no
    case \0 # move 1
      if it.operand
        n = it.idx + 1
        next = expr[n++] while next?operator
        if next?
          new-expr = move.0 expr, it, next
    case \1 # move 2
      last = expr[it.idx - 1]
      if it.operator and (last!? or last.operand)
        current = it.node
        len = 0
        for i from it.idx + 1 til expr.length
          if expr[i]operator and expr[i]node is not current
            current = expr[i]node
            len++
          else
            break
        new-expr = move.1 expr, it.idx, len
    case \2
      if it.operator
        if next?operand and valid expr, it, next
          new-expr = move.2 expr, it, next
      else # operand
        if next?operator and valid expr, it, next
          new-expr = move.2 expr, it, next

    if new-expr?
      # temporarily turn off mouse listeners
      tokens
        .on \mouseover null
        .on \mouseout  null
      pack-hash new-expr, chips

# SA moves, operating on slicing expression
move =
  # swap two adjacent operands
  * function move1 expr, operand1, operand2
      expr.map(-> {...it})
        tmp = &[operand1.idx]
        &[operand1.idx] = &[operand2.idx] <<< idx: operand1.idx
        &[operand2.idx] = tmp <<< idx: operand2.idx

  # complement some chain of non-zero length
  * function move2 expr, chain-start, len
      expr.map(-> {...it})
        for i from chain-start to chain-start + len
          &[i]node = complement[<>]

  # swap two adjacent operand and operator
  # WARNING: doesn't check for validity of the move
  * function move3 expr, alpha1, alpha2
      expr.map(-> {...it})
        tmp = &[alpha1.idx]
        &[alpha1.idx] = &[alpha2.idx] <<< idx: alpha1.idx
        &[alpha2.idx] = tmp <<< idx: alpha2.idx

# whether a move3 is valid
# section 4, last paragraph in the paper
function valid expr, alpha1, alpha2
  alpha3 = expr[alpha2.idx + 1]
  if alpha3? and alpha3.node is alpha1.node
    false
  else
    if alpha1.operand and alpha2.operator
      2 * alpha2.d < alpha1.idx + 1 # 2d_(i-1) < i
    else
      true

window.add-event-listener \hashchange !->
  data = unpack-hash!

  {chips} := data

  display-layout data.expr

# annealing state
annealing = {}

document.add-event-listener \DOMContentLoaded !->

  layout-root := d3.select \#slicing-rectangle
    .append \svg:svg .attr width: 300 height: 300
    .append \svg:g .attr \class \layout-container

  rect-root := layout-root
    .append \svg:g .attr \class \layout-rectangles

  layout-border := layout-root.append \svg:rect
    .attr id: \layout-border width: \100% height: \100%

  line-root := layout-root
    .append \svg:g .attr \class \layout-lines

  expr-root := d3.select \#polish-expression .append \svg:svg

  tree-root := d3.select \#slicing-tree
    .append \svg:svg .attr width: 500 height: 500
    .append \svg:g
      .attr do
        id        : \tree-root
        transform : 'translate(50, 50)'

  link-root := tree-root
    .append \svg:g
    .attr do
      id: \link-root

  node-root := tree-root
    .append \svg:g
    .attr do
      id: \node-root

  data = unpack-hash!

  {chips} := data

  $ \chips .value = chips.map -> "#{it.width}x#{it.height}"
    .join '    '

  $ \load .onclick = !->
    try
      loaded-chips = unpack-chips $(\chips).value
      # sanity check
      for loaded-chips
        unless &width and &height
          throw new Error "I don't think those are valid chips..."

      expr = initial-expr loaded-chips
      pack-hash expr, loaded-chips
    catch
      alert e.message

  $ \randomize .onclick = !->
    no = parse-int ($ \rand-no .value), 10
    $ \rand-no .value = no
    new-chips = for i til Math.max 10, (Math.min 25, no)
      width: (Math.random! * 15)|0 + 1
      height: (Math.random! * 15)|0 + 1

    $ \chips .value = new-chips.map -> "#{it.width}x#{it.height}"
      .join '    '
    expr = initial-expr new-chips
    pack-hash expr, new-chips

  display-layout data.expr

  # set up annealing listeners
  annealing <<<
    moves-el: $ \moves
    last-cost-el: $ \last-cost
    best-cost-el: $ \best-cost

    temp-meter-el: $ \temp-meter

    start: $ \start
    stop: $ \stop

    graph-root: d3.select \#anneal-graph
      .append \svg:svg .attr width: 500 height: 300

  annealing.line-root = annealing.graph-root
    .append \svg:g .attr \transform 'translate(20, 20)'

  # stupid browser state
  annealing.start.disabled = false
  annealing.stop.disabled = true
  annealing.moves-el.value = 0
  annealing.last-cost-el.value = 0
  annealing.best-cost-el.value = 0

  annealing.start.onclick = start-annealing
  annealing.stop.onclick = stop-annealing

function start-annealing
  {expr} = unpack-hash!
  tree = tree-from expr
  calculate-size tree

  a = annealing
  a.moves-el.value = 0
  a.last-cost-el.value = tree.width * tree.height
  a.best-cost-el.value = tree.width * tree.height

  a.start.disabled = true
  a.stop.disabled = false

  a.worker = new Worker \anneal.js
    &onmessage = anneal-message

    &post-message {chips, expr}

!function graph-annealing {temps, costs, best-costs}
  temp-y = d3.scale.linear!domain [0 d3.max(temps)]
    .range [20 280]

  cost-y = d3.scale.linear!domain [d3.min(best-costs), d3.max(costs)]
    .range [20 280]

  temp-x = d3.scale.linear!domain [0 temps.length]
    .range [20 480]

  cost-x = d3.scale.linear!domain [0 costs.length]
    .range [20 480]

  cost-line = d3.svg.line!
    .x (d, i) -> cost-x i
    .y -> 280 - cost-y it

  temp-line = d3.svg.line!
    .x (d, i) -> temp-x i
    .y -> 280 - temp-y it

  lines = annealing.line-root.select-all \path.cost
    .data [costs, best-costs]
  lines.enter!
    .append \svg:path
    .attr \class 'cost line-graph'
  lines
    .attr \d -> cost-line it

  lines = annealing.line-root.select-all \path.temp
    .data [temps]
  lines.enter!
    .append \svg:path
    .attr \class 'temp line-graph'
  lines
    .attr \d -> temp-line it

  annealing.line-root
    &select-all \.costy
      &data cost-y.ticks 10
        &enter!
          .append \svg:text
          .attr \class 'costy scale'
        &text String
        &attr \x 0
        &attr \y -> 280 - cost-y it
        &exit!remove!

function stop-annealing
  annealing.worker.terminate!

  a = annealing
  a.start.disabled = false
  a.stop.disabled = true

  pack-hash a.best-expr, chips

last = Date.now!

function anneal-message {data}
  a = annealing
  switch data.type
  case \log
    console.log data.message
  case \init
    a.temp-meter-el.max = data.temp
  case \new-expr
    pack-hash a.best-expr, chips
  case \progress
    a.best-expr = data.best

    a.moves-el.value = data.moves
    a.last-cost-el.value = data.cur-cost
    a.best-cost-el.value = data.best-cost
    a.temp-meter-el
      &value = data.temp
      &textContent = data.temp

    graph-annealing data

    # swap display every once and a while
    if Date.now! - last > 1000
      last := Date.now!
      pack-hash data.cur, chips
      graph-annealing data
  case \done
    stop-annealing!
    graph-annealing data

